{
  "name": "porter",
  "info": {
    "first_deployed": "2023-09-05T18:57:59.485162-04:00",
    "last_deployed": "2023-09-05T18:57:59.485162-04:00",
    "deleted": "",
    "description": "Install complete",
    "status": "deployed"
  },
  "chart": {
    "metadata": {
      "name": "web",
      "home": "https://getporter.dev/",
      "version": "0.136.0",
      "description": "Web application that is exposed to external traffic.",
      "keywords": [
        "porter",
        "application",
        "service",
        "web"
      ],
      "icon": "https://user-images.githubusercontent.com/65516095/111255214-07d3da80-85ed-11eb-99e2-fddcbdb99bdb.png",
      "apiVersion": "v2",
      "appVersion": "1.25.0",
      "type": "application"
    },
    "lock": null,
    "templates": [
      {
        "name": "templates/_helpers.tpl",
        "data": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiZG9ja2VyLXRlbXBsYXRlLm5hbWUiIC19fQp7ey0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgfX0Ke3stIGVuZCB9fQoKe3svKgpDcmVhdGUgYSBkZWZhdWx0IGZ1bGx5IHF1YWxpZmllZCBhcHAgbmFtZS4KV2UgdHJ1bmNhdGUgYXQgNjMgY2hhcnMgYmVjYXVzZSBzb21lIEt1YmVybmV0ZXMgbmFtZSBmaWVsZHMgYXJlIGxpbWl0ZWQgdG8gdGhpcyAoYnkgdGhlIEROUyBuYW1pbmcgc3BlYykuCklmIHJlbGVhc2UgbmFtZSBjb250YWlucyBjaGFydCBuYW1lIGl0IHdpbGwgYmUgdXNlZCBhcyBhIGZ1bGwgbmFtZS4KKi99fQp7ey0gZGVmaW5lICJkb2NrZXItdGVtcGxhdGUuZnVsbG5hbWUiIC19fQp7ey0gaWYgLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIH19Cnt7LSAuVmFsdWVzLmZ1bGxuYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIH19Cnt7LSBlbHNlIH19Cnt7LSAkbmFtZSA6PSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIH19Cnt7LSBpZiBjb250YWlucyAkbmFtZSAuUmVsZWFzZS5OYW1lIH19Cnt7LSAuUmVsZWFzZS5OYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiB9fQp7ey0gZWxzZSB9fQp7ey0gcHJpbnRmICIlcy0lcyIgLlJlbGVhc2UuTmFtZSAkbmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0KCnt7LyoKQ3JlYXRlIGNoYXJ0IG5hbWUgYW5kIHZlcnNpb24gYXMgdXNlZCBieSB0aGUgY2hhcnQgbGFiZWwuCiovfX0Ke3stIGRlZmluZSAiZG9ja2VyLXRlbXBsYXRlLmNoYXJ0IiAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5DaGFydC5OYW1lIC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiB9fQp7ey0gZW5kIH19Cgp7ey8qCkdlbmVyYXRlIGEgS0VEQSBTY2FsZWRPYmplY3QncyBIUEEgbmFtZShvbmx5IG1lYW50IGZvciBCL0cgZGVwbG95bWVudHMpCiovfX0Ke3stIGRlZmluZSAiZG9ja2VyLXRlbXBsYXRlLmtlZGFIcGEiIC19fQp7ey0gcHJpbnRmICJrZWRhLWhwYS0lcy0lcyIgLm5hbWUgLnRhZyB9fQp7ey0gZW5kIH19Cgp7ey8qCkNvbW1vbiBsYWJlbHMKKi99fQp7ey0gZGVmaW5lICJkb2NrZXItdGVtcGxhdGUubGFiZWxzIiAtfX0KaGVsbS5zaC9jaGFydDoge3sgaW5jbHVkZSAiZG9ja2VyLXRlbXBsYXRlLmNoYXJ0IiAuIH19Cnt7IGluY2x1ZGUgImRvY2tlci10ZW1wbGF0ZS5zZWxlY3RvckxhYmVscyIgLiB9fQp7ey0gaWYgLkNoYXJ0LkFwcFZlcnNpb24gfX0KYXBwLmt1YmVybmV0ZXMuaW8vdmVyc2lvbjoge3sgLkNoYXJ0LkFwcFZlcnNpb24gfCBxdW90ZSB9fQp7ey0gZW5kIH19CmFwcC5rdWJlcm5ldGVzLmlvL21hbmFnZWQtYnk6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0Ke3stIGVuZCB9fQoKe3svKgpTZWxlY3RvciBsYWJlbHMKKi99fQp7ey0gZGVmaW5lICJkb2NrZXItdGVtcGxhdGUuc2VsZWN0b3JMYWJlbHMiIC19fQphcHAua3ViZXJuZXRlcy5pby9uYW1lOiB7eyBpbmNsdWRlICJkb2NrZXItdGVtcGxhdGUubmFtZSIgLiB9fQphcHAua3ViZXJuZXRlcy5pby9pbnN0YW5jZToge3sgLlJlbGVhc2UuTmFtZSB9fQp7ey0gZW5kIH19Cgp7ey8qCkNyZWF0ZSB0aGUgbmFtZSBvZiB0aGUgc2VydmljZSBhY2NvdW50IHRvIHVzZQoqL319Cnt7LSBkZWZpbmUgImRvY2tlci10ZW1wbGF0ZS5zZXJ2aWNlQWNjb3VudE5hbWUiIC19fQp7ey0gaWYgLlZhbHVlcy5zZXJ2aWNlQWNjb3VudC5jcmVhdGUgfX0Ke3stIGRlZmF1bHQgKGluY2x1ZGUgImRvY2tlci10ZW1wbGF0ZS5mdWxsbmFtZSIgLikgLlZhbHVlcy5zZXJ2aWNlQWNjb3VudC5uYW1lIH19Cnt7LSBlbHNlIH19Cnt7LSBkZWZhdWx0ICJkZWZhdWx0IiAuVmFsdWVzLnNlcnZpY2VBY2NvdW50Lm5hbWUgfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cg=="
      },
      {
        "name": "templates/alb-ingress.yaml",
        "data": "e3stIGlmIC5WYWx1ZXMuYWxiSW5ncmVzcy5lbmFibGVkIC19fQp7ey0gJGZ1bGxOYW1lIDo9IGluY2x1ZGUgImRvY2tlci10ZW1wbGF0ZS5mdWxsbmFtZSIgLiAtfX0Ke3stICRzdmNQb3J0IDo9IC5WYWx1ZXMuc2VydmljZS5wb3J0IC19fQp7ey0gJGFsbEhvc3RzIDo9IC5WYWx1ZXMuYWxiSW5ncmVzcy5ob3N0cyAtfX0Ke3stICRjdXN0b21QYXRocyA6PSAuVmFsdWVzLmFsYkluZ3Jlc3MuY3VzdG9tX3BhdGhzIC19fQphcGlWZXJzaW9uOiBuZXR3b3JraW5nLms4cy5pby92MQpraW5kOiBJbmdyZXNzCm1ldGFkYXRhOgogIG5hbWU6IHt7ICRmdWxsTmFtZSB9fS1hbGIKICBsYWJlbHM6CiAgICB7ey0gaW5jbHVkZSAiZG9ja2VyLXRlbXBsYXRlLmxhYmVscyIgLiB8IG5pbmRlbnQgNCB9fQogIGFubm90YXRpb25zOgogICAga3ViZXJuZXRlcy5pby9pbmdyZXNzLmNsYXNzOiBhbGIKICAgIHt7LSBpZiAuVmFsdWVzLmFsYkluZ3Jlc3MuZ3JvdXBfbmFtZSB9fQogICAgYWxiLmluZ3Jlc3Mua3ViZXJuZXRlcy5pby9ncm91cC5uYW1lOiB7eyAuVmFsdWVzLmFsYkluZ3Jlc3MuZ3JvdXBfbmFtZSB9fQogICAge3stIGVuZCB9fQogICAge3stIGlmIC5WYWx1ZXMuYWxiSW5ncmVzcy5ncm91cF9vcmRlciB9fQogICAgYWxiLmluZ3Jlc3Mua3ViZXJuZXRlcy5pby9ncm91cC5vcmRlcjogJ3t7IC5WYWx1ZXMuYWxiSW5ncmVzcy5ncm91cF9vcmRlciB9fScKICAgIHt7LSBlbmQgfX0KICAgIGFsYi5pbmdyZXNzLmt1YmVybmV0ZXMuaW8vc2NoZW1lOiB7eyAuVmFsdWVzLmFsYkluZ3Jlc3Muc2NoZW1lIH19CiAgICBhbGIuaW5ncmVzcy5rdWJlcm5ldGVzLmlvL2xpc3Rlbi1wb3J0czogJ1t7IkhUVFBTIjo0NDN9LCB7IkhUVFAiOjgwfV0nCiAgICBhbGIuaW5ncmVzcy5rdWJlcm5ldGVzLmlvL2FjdGlvbnMuc3NsLXJlZGlyZWN0OiAneyJUeXBlIjogInJlZGlyZWN0IiwgIlJlZGlyZWN0Q29uZmlnIjogeyAiUHJvdG9jb2wiOiAiSFRUUFMiLCAiUG9ydCI6ICI0NDMiLCAiU3RhdHVzQ29kZSI6ICJIVFRQXzMwMSJ9fScKICAgIHt7LSBpZiAuVmFsdWVzLmFsYkluZ3Jlc3MuY2VydGlmaWNhdGVfYXJuIH19CiAgICBhbGIuaW5ncmVzcy5rdWJlcm5ldGVzLmlvL2NlcnRpZmljYXRlLWFybjoge3sgLlZhbHVlcy5hbGJJbmdyZXNzLmNlcnRpZmljYXRlX2FybiB9fQogICAge3stIGVuZCB9fQogICAge3stIGlmIC5WYWx1ZXMuYWxiSW5ncmVzcy53YWZ2Ml9hY2xfYXJuIH19CiAgICBhbGIuaW5ncmVzcy5rdWJlcm5ldGVzLmlvL3dhZnYyLWFjbC1hcm46IHt7IC5WYWx1ZXMuYWxiSW5ncmVzcy53YWZ2Ml9hY2xfYXJuIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gaWYgLlZhbHVlcy5hbGJJbmdyZXNzLmV4dGVybmFsX2RucyB9fQogICAgZXh0ZXJuYWwtZG5zLmFscGhhLmt1YmVybmV0ZXMuaW8vaG9zdG5hbWU6ICd7eyBqb2luICIsICIgJGFsbEhvc3RzIH19JwogICAge3stIGVuZCB9fQogICAgYWxiLmluZ3Jlc3Mua3ViZXJuZXRlcy5pby90YXJnZXQtdHlwZToge3sgLlZhbHVlcy5hbGJJbmdyZXNzLnRhcmdldF90eXBlIH19CiAgICB7ey0gaWYgLlZhbHVlcy5hbGJJbmdyZXNzLnNlY3VyaXR5X2dyb3VwcyB9fQogICAgYWxiLmluZ3Jlc3Mua3ViZXJuZXRlcy5pby9zZWN1cml0eS1ncm91cHM6IHt7IC5WYWx1ZXMuYWxiSW5ncmVzcy5zZWN1cml0eV9ncm91cHMgfX0KICAgIHt7LSBlbmQgfX0KICAgIHt7LSBpZiAuVmFsdWVzLmFsYkluZ3Jlc3MuaGVhbHRoY2hlY2tfcGF0aCB9fQogICAgYWxiLmluZ3Jlc3Mua3ViZXJuZXRlcy5pby9oZWFsdGhjaGVjay1wYXRoOiB7eyAuVmFsdWVzLmFsYkluZ3Jlc3MuaGVhbHRoY2hlY2tfcGF0aCB9fQogICAge3stIGVuZCB9fQogICAge3stIGlmIC5WYWx1ZXMuYWxiSW5ncmVzcy5oZWFsdGhjaGVja19pbnRlcnZhbF9zZWNvbmRzIH19CiAgICBhbGIuaW5ncmVzcy5rdWJlcm5ldGVzLmlvL2hlYWx0aGNoZWNrLWludGVydmFsLXNlY29uZHM6IHt7IC5WYWx1ZXMuYWxiSW5ncmVzcy5oZWFsdGhjaGVja19pbnRlcnZhbF9zZWNvbmRzIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gaWYgLlZhbHVlcy5hbGJJbmdyZXNzLmhlYWx0aGNoZWNrX3RpbWVvdXRfc2Vjb25kcyB9fQogICAgYWxiLmluZ3Jlc3Mua3ViZXJuZXRlcy5pby9oZWFsdGhjaGVjay10aW1lb3V0LXNlY29uZHM6IHt7IC5WYWx1ZXMuYWxiSW5ncmVzcy5oZWFsdGhjaGVja190aW1lb3V0X3NlY29uZHMgfX0KICAgIHt7LSBlbmQgfX0KICAgIHt7LSBpZiAuVmFsdWVzLmFsYkluZ3Jlc3MuaGVhbHRoY2hlY2tfc3VjY2Vzc19jb2RlcyB9fQogICAgYWxiLmluZ3Jlc3Mua3ViZXJuZXRlcy5pby9zdWNjZXNzLWNvZGVzOiB7eyAuVmFsdWVzLmFsYkluZ3Jlc3MuaGVhbHRoY2hlY2tfc3VjY2Vzc19jb2RlcyB9fQogICAge3stIGVuZCB9fQogICAge3stIGlmIC5WYWx1ZXMuYWxiSW5ncmVzcy5oZWFsdGhjaGVja19oZWFsdGh5X3RocmVzaG9sZF9jb3VudCB9fQogICAgYWxiLmluZ3Jlc3Mua3ViZXJuZXRlcy5pby9oZWFsdGh5LXRocmVzaG9sZC1jb3VudDoge3sgLlZhbHVlcy5hbGJJbmdyZXNzLmhlYWx0aGNoZWNrX2hlYWx0aHlfdGhyZXNob2xkX2NvdW50IH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gaWYgLlZhbHVlcy5hbGJJbmdyZXNzLmhlYWx0aGNoZWNrX3VuaGVhbHRoeV90aHJlc2hvbGRfY291bnQgfX0KICAgIGFsYi5pbmdyZXNzLmt1YmVybmV0ZXMuaW8vdW5oZWFsdGh5LXRocmVzaG9sZC1jb3VudDoge3sgLlZhbHVlcy5hbGJJbmdyZXNzLmhlYWx0aGNoZWNrX3VuaGVhbHRoeV90aHJlc2hvbGRfY291bnQgfX0KICAgIHt7LSBlbmQgfX0KICAgIHt7LSBpZiAuVmFsdWVzLmFsYkluZ3Jlc3MuaGVhbHRoY2hlY2tfcG9ydCB9fQogICAgYWxiLmluZ3Jlc3Mua3ViZXJuZXRlcy5pby9oZWFsdGhjaGVjay1wb3J0OiB7eyAuVmFsdWVzLmFsYkluZ3Jlc3MuaGVhbHRoY2hlY2tfcG9ydCB9fQogICAge3stIGVuZCB9fQogICAge3stIGlmIC5WYWx1ZXMuYWxiSW5ncmVzcy5oZWFsdGhjaGVja19wcm90b2NvbCB9fQogICAgYWxiLmluZ3Jlc3Mua3ViZXJuZXRlcy5pby9oZWFsdGhjaGVjay1wcm90b2NvbDoge3sgLlZhbHVlcy5hbGJJbmdyZXNzLmhlYWx0aGNoZWNrX3Byb3RvY29sIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gaWYgLlZhbHVlcy5hbGJJbmdyZXNzLnRhcmdldF9ub2RlX2xhYmVscyB9fQogICAgYWxiLmluZ3Jlc3Mua3ViZXJuZXRlcy5pby90YXJnZXQtbm9kZS1sYWJlbHM6IHt7IC5WYWx1ZXMuYWxiSW5ncmVzcy50YXJnZXRfbm9kZV9sYWJlbHMgfX0KICAgIHt7LSBlbmQgfX0KICAgIHt7LSByYW5nZSAkaywgJHYgOj0gLlZhbHVlcy5hbGJJbmdyZXNzLmFubm90YXRpb25zIH19CiAgICB7ey0gaWYgJHZ9fQogICAge3stIGlmIGFuZCAobm90IChlcSAkdiAibnVsbCIpKSAkdn19CiAgICB7eyAkayB9fToge3sgJHYgfX0KICAgIHt7LSBlbmQgfX0KICAgIHt7LSBlbmQgfX0KICAgIHt7LSBlbmQgfX0Kc3BlYzoKICBydWxlczoKICB7ey0gcmFuZ2UgJGFsbEhvc3RzIH19CiAgICAtIGhvc3Q6IHt7IC4gfCBxdW90ZSB9fQogICAgICBodHRwOgogICAgICAgIHBhdGhzOgogICAgICAgICAge3sgaWYgZ3QgKGxlbiAkY3VzdG9tUGF0aHMpIDAgfX0KICAgICAgICAgIHt7LSByYW5nZSAkY3VzdG9tUGF0aHMgfX0KICAgICAgICAgIC0gcGF0aDoge3sgLnBhdGggfX0KICAgICAgICAgICAge3stIGlmICQuQ2FwYWJpbGl0aWVzLkFQSVZlcnNpb25zLkhhcyAibmV0d29ya2luZy5rOHMuaW8vdjEvSW5ncmVzcyIgfX0KICAgICAgICAgICAgcGF0aFR5cGU6IHt7IC5wYXRoVHlwZSB8IGRlZmF1bHQgIkltcGxlbWVudGF0aW9uU3BlY2lmaWMiIH19CiAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgICAgYmFja2VuZDoKICAgICAgICAgICAge3stIGlmICQuQ2FwYWJpbGl0aWVzLkFQSVZlcnNpb25zLkhhcyAibmV0d29ya2luZy5rOHMuaW8vdjEvSW5ncmVzcyIgfX0KICAgICAgICAgICAgICBzZXJ2aWNlOgogICAgICAgICAgICAgICAgbmFtZToge3sgLnNlcnZpY2VOYW1lIH19CiAgICAgICAgICAgICAgICBwb3J0OgogICAgICAgICAgICAgICAgICBudW1iZXI6IHt7IC5zZXJ2aWNlUG9ydCB9fQogICAgICAgICAgICB7ey0gZWxzZSB9fQogICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiB7eyAuc2VydmljZU5hbWUgfX0gCiAgICAgICAgICAgICAgc2VydmljZVBvcnQ6IHt7IC5zZXJ2aWNlUG9ydCB9fQogICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7eyBlbHNlIH19CiAgICAgICAgICAtIHBhdGg6IC8qCiAgICAgICAgICAgIHt7LSBpZiAkLkNhcGFiaWxpdGllcy5BUElWZXJzaW9ucy5IYXMgIm5ldHdvcmtpbmcuazhzLmlvL3YxL0luZ3Jlc3MiIH19CiAgICAgICAgICAgIHBhdGhUeXBlOiBJbXBsZW1lbnRhdGlvblNwZWNpZmljCiAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgICAgYmFja2VuZDoKICAgICAgICAgICAge3stIGlmICQuQ2FwYWJpbGl0aWVzLkFQSVZlcnNpb25zLkhhcyAibmV0d29ya2luZy5rOHMuaW8vdjEvSW5ncmVzcyIgfX0KICAgICAgICAgICAgICBzZXJ2aWNlOgogICAgICAgICAgICAgICAgbmFtZToge3sgJGZ1bGxOYW1lIH19CiAgICAgICAgICAgICAgICBwb3J0OgogICAgICAgICAgICAgICAgICBudW1iZXI6IHt7ICRzdmNQb3J0IH19CiAgICAgICAgICAgIHt7LSBlbHNlIH19CiAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHt7ICRmdWxsTmFtZSB9fSAKICAgICAgICAgICAgICBzZXJ2aWNlUG9ydDoge3sgJHN2Y1BvcnQgfX0KICAgICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAge3stIGVuZCB9fQogIHt7LSBlbmQgfX0gICAgICAgIAp7ey0gZW5kIH19Cg=="
      },
      {
        "name": "templates/cloudsql-secret.yaml",
        "data": "e3stIGlmIC5WYWx1ZXMuY2xvdWRzcWwuZW5hYmxlZCAtfX0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VjcmV0Cm1ldGFkYXRhOgogIG5hbWU6ICJjbG91ZHNxbC1zZWNyZXQte3sgaW5jbHVkZSAiZG9ja2VyLXRlbXBsYXRlLmZ1bGxuYW1lIiAuIH19Igp0eXBlOiBPcGFxdWUKc3RyaW5nRGF0YToKICBzZXJ2aWNlX2FjY291bnQuanNvbjoge3sgLlZhbHVlcy5jbG91ZHNxbC5zZXJ2aWNlQWNjb3VudEpTT04gfCBxdW90ZSB9fSAgCnt7LSBlbmQgfX0K"
      },
      {
        "name": "templates/deployment-blue-green.yaml",
        "data": ""
      },
      {
        "name": "templates/deployment.yaml",
        "data": ""
      },
      {
        "name": "templates/hpa-blue-green.yaml",
        "data": "e3stIGlmIGFuZCAobm90ICQuVmFsdWVzLnN0YXRlZnVsc2V0LmVuYWJsZWQpICQuVmFsdWVzLmJsdWVncmVlbi5lbmFibGVkIC19fQp7ey0gaWYgJC5WYWx1ZXMuYXV0b3NjYWxpbmcuZW5hYmxlZCB9fQp7ey0gcmFuZ2UgJHYsICR0YWcgOj0gJC5WYWx1ZXMuYmx1ZWdyZWVuLmltYWdlVGFncyB9fQp7ey0gaWYgJC5DYXBhYmlsaXRpZXMuQVBJVmVyc2lvbnMuSGFzICJhdXRvc2NhbGluZy92MiIgfX0KYXBpVmVyc2lvbjogYXV0b3NjYWxpbmcvdjIKe3stIGVsc2UgfX0KYXBpVmVyc2lvbjogYXV0b3NjYWxpbmcvdjJiZXRhMgp7ey0gZW5kIH19CmtpbmQ6IEhvcml6b250YWxQb2RBdXRvc2NhbGVyCm1ldGFkYXRhOgogIG5hbWU6IHt7IGluY2x1ZGUgImRvY2tlci10ZW1wbGF0ZS5mdWxsbmFtZSIgJCB9fS17eyAkdGFnIH19CnNwZWM6CiAgc2NhbGVUYXJnZXRSZWY6CiAgICBhcGlWZXJzaW9uOiBhcHBzL3YxCiAgICBraW5kOiBEZXBsb3ltZW50CiAgICBuYW1lOiB7eyBpbmNsdWRlICJkb2NrZXItdGVtcGxhdGUuZnVsbG5hbWUiICQgfX0te3sgJHRhZyB9fQogIG1pblJlcGxpY2FzOiB7eyAkLlZhbHVlcy5hdXRvc2NhbGluZy5taW5SZXBsaWNhcyB9fQogIG1heFJlcGxpY2FzOiB7eyAkLlZhbHVlcy5hdXRvc2NhbGluZy5tYXhSZXBsaWNhcyB9fQogIG1ldHJpY3M6Cnt7LSB3aXRoICQuVmFsdWVzLmF1dG9zY2FsaW5nLnRhcmdldE1lbW9yeVV0aWxpemF0aW9uUGVyY2VudGFnZSB9fQogICAgLSB0eXBlOiBSZXNvdXJjZQogICAgICByZXNvdXJjZToKICAgICAgICBuYW1lOiBtZW1vcnkKICAgICAgICB0YXJnZXQ6CiAgICAgICAgICB0eXBlOiBVdGlsaXphdGlvbgogICAgICAgICAgYXZlcmFnZVV0aWxpemF0aW9uOiB7eyAuIH19Cnt7LSBlbmQgfX0Ke3stIHdpdGggJC5WYWx1ZXMuYXV0b3NjYWxpbmcudGFyZ2V0Q1BVVXRpbGl6YXRpb25QZXJjZW50YWdlIH19CiAgICAtIHR5cGU6IFJlc291cmNlCiAgICAgIHJlc291cmNlOgogICAgICAgIG5hbWU6IGNwdQogICAgICAgIHRhcmdldDoKICAgICAgICAgIHR5cGU6IFV0aWxpemF0aW9uCiAgICAgICAgICBhdmVyYWdlVXRpbGl6YXRpb246IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0Ke3stIGVuZCB9fQ=="
      },
      {
        "name": "templates/hpa.yaml",
        "data": "e3stIGlmIG5vdCAuVmFsdWVzLmJsdWVncmVlbi5lbmFibGVkIC19fQp7ey0gaWYgLlZhbHVlcy5hdXRvc2NhbGluZy5lbmFibGVkIH19Cnt7LSBpZiAkLkNhcGFiaWxpdGllcy5BUElWZXJzaW9ucy5IYXMgImF1dG9zY2FsaW5nL3YyIiB9fQphcGlWZXJzaW9uOiBhdXRvc2NhbGluZy92Mgp7ey0gZWxzZSB9fQphcGlWZXJzaW9uOiBhdXRvc2NhbGluZy92MmJldGEyCnt7LSBlbmQgfX0Ka2luZDogSG9yaXpvbnRhbFBvZEF1dG9zY2FsZXIKbWV0YWRhdGE6CiAgbmFtZToge3sgaW5jbHVkZSAiZG9ja2VyLXRlbXBsYXRlLmZ1bGxuYW1lIiAuIH19CnNwZWM6CiAgc2NhbGVUYXJnZXRSZWY6CiAgICBhcGlWZXJzaW9uOiBhcHBzL3YxCiAgICBraW5kOiBEZXBsb3ltZW50CiAgICBuYW1lOiB7eyBpbmNsdWRlICJkb2NrZXItdGVtcGxhdGUuZnVsbG5hbWUiIC4gfX0KICBtaW5SZXBsaWNhczoge3sgLlZhbHVlcy5hdXRvc2NhbGluZy5taW5SZXBsaWNhcyB9fQogIG1heFJlcGxpY2FzOiB7eyAuVmFsdWVzLmF1dG9zY2FsaW5nLm1heFJlcGxpY2FzIH19CiAgbWV0cmljczoKe3stIHdpdGggLlZhbHVlcy5hdXRvc2NhbGluZy50YXJnZXRNZW1vcnlVdGlsaXphdGlvblBlcmNlbnRhZ2UgfX0KICAgIC0gdHlwZTogUmVzb3VyY2UKICAgICAgcmVzb3VyY2U6CiAgICAgICAgbmFtZTogbWVtb3J5CiAgICAgICAgdGFyZ2V0OgogICAgICAgICAgdHlwZTogVXRpbGl6YXRpb24KICAgICAgICAgIGF2ZXJhZ2VVdGlsaXphdGlvbjoge3sgLiB9fQp7ey0gZW5kIH19Cnt7LSB3aXRoIC5WYWx1ZXMuYXV0b3NjYWxpbmcudGFyZ2V0Q1BVVXRpbGl6YXRpb25QZXJjZW50YWdlIH19CiAgICAtIHR5cGU6IFJlc291cmNlCiAgICAgIHJlc291cmNlOgogICAgICAgIG5hbWU6IGNwdQogICAgICAgIHRhcmdldDoKICAgICAgICAgIHR5cGU6IFV0aWxpemF0aW9uCiAgICAgICAgICBhdmVyYWdlVXRpbGl6YXRpb246IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0K"
      },
      {
        "name": "templates/ingress.yaml",
        "data": "e3stIGlmIC5WYWx1ZXMuaW5ncmVzcy5lbmFibGVkIC19fQp7ey0gJGZ1bGxOYW1lIDo9IGluY2x1ZGUgImRvY2tlci10ZW1wbGF0ZS5mdWxsbmFtZSIgLiAtfX0Ke3stICRzdmNQb3J0IDo9IC5WYWx1ZXMuc2VydmljZS5wb3J0IC19fQp7ey0gJGFsbEhvc3RzIDo9IGNvbmNhdCAuVmFsdWVzLmluZ3Jlc3MuaG9zdHMgLlZhbHVlcy5pbmdyZXNzLnBvcnRlcl9ob3N0cyAtfX0Ke3stICRjdXN0b21QYXRocyA6PSAuVmFsdWVzLmluZ3Jlc3MuY3VzdG9tX3BhdGhzIC19fQphcGlWZXJzaW9uOiBuZXR3b3JraW5nLms4cy5pby92MQpraW5kOiBJbmdyZXNzCm1ldGFkYXRhOgogIG5hbWU6IHt7ICRmdWxsTmFtZSB9fQogIGxhYmVsczoKICAgIHt7LSBpbmNsdWRlICJkb2NrZXItdGVtcGxhdGUubGFiZWxzIiAuIHwgbmluZGVudCA0IH19CiAgYW5ub3RhdGlvbnM6CiAgICBuZ2lueC5pbmdyZXNzLmt1YmVybmV0ZXMuaW8vcHJveHktYm9keS1zaXplOiA1MG0KICAgIG5naW54LmluZ3Jlc3Mua3ViZXJuZXRlcy5pby9wcm94eS1zZW5kLXRpbWVvdXQ6ICI2MCIKICAgIG5naW54LmluZ3Jlc3Mua3ViZXJuZXRlcy5pby9wcm94eS1yZWFkLXRpbWVvdXQ6ICI2MCIKICAgIG5naW54LmluZ3Jlc3Mua3ViZXJuZXRlcy5pby9wcm94eS1jb25uZWN0LXRpbWVvdXQ6ICI2MCIKICAgIHt7LSBpZiBhbmQgKGd0IChsZW4gJGN1c3RvbVBhdGhzKSAwKSAuVmFsdWVzLmluZ3Jlc3MucmV3cml0ZUN1c3RvbVBhdGhzRW5hYmxlZCB9fQogICAgbmdpbnguaW5ncmVzcy5rdWJlcm5ldGVzLmlvL3Jld3JpdGUtdGFyZ2V0OiAvCiAgICB7ey0gZW5kIH19CiAgICB7ey0gaWYgLlZhbHVlcy5pbmdyZXNzLnRscyB9fQogICAge3stIGlmIG5vdCAoaGFzS2V5IC5WYWx1ZXMuaW5ncmVzcy5hbm5vdGF0aW9ucyAiY2VydC1tYW5hZ2VyLmlvL2NsdXN0ZXItaXNzdWVyIil9fQogICAge3stIGlmIC5WYWx1ZXMuaW5ncmVzcy53aWxkY2FyZCB9fQogICAgY2VydC1tYW5hZ2VyLmlvL2NsdXN0ZXItaXNzdWVyOiBsZXRzZW5jcnlwdC1wcm9kLXdpbGRjYXJkCiAgICB7ey0gZWxzZSB9fQogICAgY2VydC1tYW5hZ2VyLmlvL2NsdXN0ZXItaXNzdWVyOiBsZXRzZW5jcnlwdC1wcm9kCiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICAjIHByb3ZpZGVyLWFnbm9zdGljIGRlZmF1bHQgYW5ub3RhdGlvbnMKICAgICMgaWYgdmFsdWUgaXMgcHJvdmlkZWQgYXMgIm51bGwiIG9yIG51bGwsIGl0IGlzIHVuc2V0CiAgICAjIGFkZGluZyBhIGZpeCBmb3Igc2NlbmFyaW9zIHdoZXJlIGluZ3Jlc3MgYW5ub3RhdGlvbnMgYXJlIGluc2lkZSBpbmdyZXNzLmFubm90YXRpb25zLm5vcm1hbAogICAge3stIGlmIG5vdCAoaGFzS2V5IC5WYWx1ZXMuaW5ncmVzcy5hbm5vdGF0aW9ucyAibm9ybWFsIil9fSAKICAgIHt7LSBpZiBndCAobGVuIC5WYWx1ZXMuaW5ncmVzcy5hbm5vdGF0aW9ucykgMH19CiAgICB7ey0gcmFuZ2UgJGssICR2IDo9IC5WYWx1ZXMuaW5ncmVzcy5hbm5vdGF0aW9ucyB9fQogICAge3stIGlmICR2fX0KICAgIHt7LSBpZiBhbmQgKG5vdCAoZXEgJHYgIm51bGwiKSkgJHZ9fQogICAge3sgJGsgfX06IHt7ICR2IH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gaWYgaGFzS2V5IC5WYWx1ZXMuaW5ncmVzcy5hbm5vdGF0aW9ucyAibm9ybWFsIn19CiAgICB7ey0gaWYgZ3QgKGxlbiAuVmFsdWVzLmluZ3Jlc3MuYW5ub3RhdGlvbnMubm9ybWFsKSAwfX0KICAgIHt7LSByYW5nZSAkaywgJHYgOj0gLlZhbHVlcy5pbmdyZXNzLmFubm90YXRpb25zLm5vcm1hbCB9fQogICAge3stIGlmICR2fX0KICAgIHt7LSBpZiBhbmQgKG5vdCAoZXEgJHYgIm51bGwiKSkgJHZ9fQogICAge3sgJGsgfX06IHt7ICR2IH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CnNwZWM6Cnt7LSBpZiBoYXNLZXkgLlZhbHVlcy5pbmdyZXNzLmFubm90YXRpb25zICJrdWJlcm5ldGVzLmlvL2luZ3Jlc3MuY2xhc3MiIH19CiAgaW5ncmVzc0NsYXNzTmFtZToge3sgaW5kZXggLlZhbHVlcy5pbmdyZXNzLmFubm90YXRpb25zICJrdWJlcm5ldGVzLmlvL2luZ3Jlc3MuY2xhc3MiIH19Cnt7LSBlbHNlIH19CiAgaW5ncmVzc0NsYXNzTmFtZTogbmdpbngKe3stIGVuZCB9fQogIHt7LSBpZiBvciAoLlZhbHVlcy5pbmdyZXNzLnRscykgKC5WYWx1ZXMuaW5ncmVzcy5jdXN0b21UbHMuZW5hYmxlZCkgfX0KICB0bHM6CiAgICB7ey0gcmFuZ2UgJGFsbEhvc3RzIH19CiAgICAtIGhvc3RzOgogICAgICAgIC0ge3sgLiB8IHF1b3RlIH19CiAgICAgIHt7LSBpZiBub3QgJC5WYWx1ZXMuaW5ncmVzcy51c2VEZWZhdWx0SW5ncmVzc1RMU1NlY3JldCB9fQogICAgICB7eyBpZiAkLlZhbHVlcy5pbmdyZXNzLndpbGRjYXJkIH19CiAgICAgIHNlY3JldE5hbWU6IHdpbGRjYXJkLWNlcnQtdGxzCiAgICAgIHt7IGVsc2UgaWYgJC5WYWx1ZXMuaW5ncmVzcy5jdXN0b21UbHMuZW5hYmxlZCB9fQogICAgICBzZWNyZXROYW1lOiB7eyAkLlZhbHVlcy5pbmdyZXNzLmN1c3RvbVRscy5jdXN0b21UbHNTZWNyZXQgfX0KICAgICAge3sgZWxzZSB9fQogICAgICBzZWNyZXROYW1lOiAne3sgaW5jbHVkZSAiZG9ja2VyLXRlbXBsYXRlLmZ1bGxuYW1lIiAkIH19LXt7IC4gfCByZXBsYWNlICIuIiAiLSIgfX0nCiAgICAgIHt7IGVuZCB9fQogICAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAge3stIGVuZCB9fQogIHJ1bGVzOgogICAge3stIHJhbmdlICRhbGxIb3N0cyB9fQogICAgICAtIGhvc3Q6IHt7IC4gfCBxdW90ZSB9fQogICAgICAgIGh0dHA6CiAgICAgICAgICBwYXRoczoKICAgICAgICAgICAge3sgaWYgZ3QgKGxlbiAkY3VzdG9tUGF0aHMpIDAgfX0KICAgICAgICAgICAge3stIHJhbmdlICRjdXN0b21QYXRocyB9fQogICAgICAgICAgICAtIHBhdGg6IHt7IC5wYXRoIH19CiAgICAgICAgICAgICAgcGF0aFR5cGU6IEltcGxlbWVudGF0aW9uU3BlY2lmaWMKICAgICAgICAgICAgICBiYWNrZW5kOgogICAgICAgICAgICAgICAgc2VydmljZToKICAgICAgICAgICAgICAgICAgbmFtZToge3sgLnNlcnZpY2VOYW1lIH19CiAgICAgICAgICAgICAgICAgIHBvcnQ6CiAgICAgICAgICAgICAgICAgICAgbnVtYmVyOiB7eyAuc2VydmljZVBvcnQgfX0KICAgICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAgICB7eyBlbHNlIH19CiAgICAgICAgICAgIC0gcGF0aFR5cGU6IEltcGxlbWVudGF0aW9uU3BlY2lmaWMKICAgICAgICAgICAgICBiYWNrZW5kOgogICAgICAgICAgICAgICAgc2VydmljZToKICAgICAgICAgICAgICAgICAgbmFtZToge3sgJGZ1bGxOYW1lIH19CiAgICAgICAgICAgICAgICAgIHBvcnQ6CiAgICAgICAgICAgICAgICAgICAgbnVtYmVyOiB7eyAkc3ZjUG9ydCB9fQogICAgICAgICAgICB7eyBlbmQgfX0KICAgIHt7LSBlbmQgfX0Ke3stIGVuZCB9fQ=="
      },
      {
        "name": "templates/private-ingress.yaml",
        "data": "e3stIGlmIC5WYWx1ZXMucHJpdmF0ZUluZ3Jlc3MuZW5hYmxlZCAtfX0Ke3stICRmdWxsTmFtZSA6PSBpbmNsdWRlICJkb2NrZXItdGVtcGxhdGUuZnVsbG5hbWUiIC4gLX19Cnt7LSAkc3ZjUG9ydCA6PSAuVmFsdWVzLnNlcnZpY2UucG9ydCAtfX0Ke3stICRhbGxQcml2YXRlSG9zdHMgOj0gY29uY2F0IC5WYWx1ZXMucHJpdmF0ZUluZ3Jlc3MuaG9zdHMgIC19fQp7ey0gJGN1c3RvbVBhdGhzIDo9IC5WYWx1ZXMucHJpdmF0ZUluZ3Jlc3MuY3VzdG9tX3BhdGhzIC19fQphcGlWZXJzaW9uOiBuZXR3b3JraW5nLms4cy5pby92MQpraW5kOiBJbmdyZXNzCm1ldGFkYXRhOgogIG5hbWU6IHt7ICRmdWxsTmFtZSB9fS1wcml2YXRlCiAgbGFiZWxzOgogICAge3stIGluY2x1ZGUgImRvY2tlci10ZW1wbGF0ZS5sYWJlbHMiIC4gfCBuaW5kZW50IDQgfX0KICBhbm5vdGF0aW9uczoKICAgIG5naW54LmluZ3Jlc3Mua3ViZXJuZXRlcy5pby9wcm94eS1ib2R5LXNpemU6IDUwbQogICAgbmdpbnguaW5ncmVzcy5rdWJlcm5ldGVzLmlvL3Byb3h5LXNlbmQtdGltZW91dDogIjYwIgogICAgbmdpbnguaW5ncmVzcy5rdWJlcm5ldGVzLmlvL3Byb3h5LXJlYWQtdGltZW91dDogIjYwIgogICAgbmdpbnguaW5ncmVzcy5rdWJlcm5ldGVzLmlvL3Byb3h5LWNvbm5lY3QtdGltZW91dDogIjYwIgogICAge3stIGlmIGFuZCAoZ3QgKGxlbiAkY3VzdG9tUGF0aHMpIDApIC5WYWx1ZXMuaW5ncmVzcy5yZXdyaXRlQ3VzdG9tUGF0aHNFbmFibGVkIH19CiAgICBuZ2lueC5pbmdyZXNzLmt1YmVybmV0ZXMuaW8vcmV3cml0ZS10YXJnZXQ6IC8KICAgIHt7LSBlbmQgfX0KICAgIHt7LSBpZiAuVmFsdWVzLnByaXZhdGVJbmdyZXNzLnRscyB9fQogICAge3stIGlmIG5vdCAoaGFzS2V5IC5WYWx1ZXMucHJpdmF0ZUluZ3Jlc3MuYW5ub3RhdGlvbnMgImNlcnQtbWFuYWdlci5pby9jbHVzdGVyLWlzc3VlciIpfX0KICAgIGNlcnQtbWFuYWdlci5pby9jbHVzdGVyLWlzc3Vlcjoge3sgLlZhbHVlcy5wcml2YXRlSW5ncmVzcy5jbHVzdGVySXNzdWVyIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICAjIHByb3ZpZGVyLWFnbm9zdGljIGRlZmF1bHQgYW5ub3RhdGlvbnMKICAgICMgaWYgdmFsdWUgaXMgcHJvdmlkZWQgYXMgIm51bGwiIG9yIG51bGwsIGl0IGlzIHVuc2V0CiAgICAjIGFkZGluZyBhIGZpeCBmb3Igc2NlbmFyaW9zIHdoZXJlIGluZ3Jlc3MgYW5ub3RhdGlvbnMgYXJlIGluc2lkZSBpbmdyZXNzLmFubm90YXRpb25zLm5vcm1hbAogICAge3stIGlmIG5vdCAoaGFzS2V5IC5WYWx1ZXMucHJpdmF0ZUluZ3Jlc3MuYW5ub3RhdGlvbnMgIm5vcm1hbCIpfX0gCiAgICB7ey0gaWYgZ3QgKGxlbiAuVmFsdWVzLnByaXZhdGVJbmdyZXNzLmFubm90YXRpb25zKSAwfX0KICAgIHt7LSByYW5nZSAkaywgJHYgOj0gLlZhbHVlcy5wcml2YXRlSW5ncmVzcy5hbm5vdGF0aW9ucyB9fQogICAge3stIGlmICR2fX0KICAgIHt7LSBpZiBhbmQgKG5vdCAoZXEgJHYgIm51bGwiKSkgJHZ9fQogICAge3sgJGsgfX06IHt7ICR2IH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gaWYgaGFzS2V5IC5WYWx1ZXMucHJpdmF0ZUluZ3Jlc3MuYW5ub3RhdGlvbnMgIm5vcm1hbCJ9fQogICAge3stIGlmIGd0IChsZW4gLlZhbHVlcy5wcml2YXRlSW5ncmVzcy5hbm5vdGF0aW9ucy5ub3JtYWwpIDB9fQogICAge3stIHJhbmdlICRrLCAkdiA6PSAuVmFsdWVzLnByaXZhdGVJbmdyZXNzLmFubm90YXRpb25zLm5vcm1hbCB9fQogICAge3stIGlmICR2fX0KICAgIHt7LSBpZiBhbmQgKG5vdCAoZXEgJHYgIm51bGwiKSkgJHZ9fQogICAge3sgJGsgfX06IHt7ICR2IH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gZW5kIH19CnNwZWM6CiAgaW5ncmVzc0NsYXNzTmFtZToge3sgLlZhbHVlcy5wcml2YXRlSW5ncmVzcy5wcml2YXRlSW5ncmVzc0NsYXNzIH19CiAge3stIGlmIC5WYWx1ZXMucHJpdmF0ZUluZ3Jlc3MudGxzIH19CiAgdGxzOgogICAgLSBob3N0czoKICAgICAgICB7ey0gcmFuZ2UgJGFsbFByaXZhdGVIb3N0cyB9fQogICAgICAgIC0ge3sgLiB8IHF1b3RlIH19CiAgICAgICAge3stIGVuZCB9fQogICAgICB7ey0gaWYgLlZhbHVlcy5wcml2YXRlSW5ncmVzcy5zZWNyZXROYW1lIH19CiAgICAgIHNlY3JldE5hbWU6IHt7IC5WYWx1ZXMucHJpdmF0ZUluZ3Jlc3Muc2VjcmV0TmFtZSB9fQogICAgICB7ey0gZWxzZSB9fQogICAgICBzZWNyZXROYW1lOiB7eyBpbmNsdWRlICJkb2NrZXItdGVtcGxhdGUuZnVsbG5hbWUiIC4gfX0KICAgICAge3stIGVuZCB9fQogIHt7LSBlbmQgfX0KICBydWxlczoKICB7ey0gcmFuZ2UgJGFsbFByaXZhdGVIb3N0cyB9fQogICAgLSBob3N0OiB7eyAuIH19CiAgICAgIGh0dHA6CiAgICAgICAgcGF0aHM6CiAgICAgICAgICB7eyBpZiBndCAobGVuICRjdXN0b21QYXRocykgMCB9fQogICAgICAgICAge3stIHJhbmdlICRjdXN0b21QYXRocyB9fQogICAgICAgICAgLSBwYXRoOiB7eyAucGF0aCB9fQogICAgICAgICAgICB7ey0gaWYgJC5DYXBhYmlsaXRpZXMuQVBJVmVyc2lvbnMuSGFzICJuZXR3b3JraW5nLms4cy5pby92MS9JbmdyZXNzIiB9fQogICAgICAgICAgICBwYXRoVHlwZTogSW1wbGVtZW50YXRpb25TcGVjaWZpYwogICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICAgIGJhY2tlbmQ6CiAgICAgICAgICAgICAge3stIGlmICQuQ2FwYWJpbGl0aWVzLkFQSVZlcnNpb25zLkhhcyAibmV0d29ya2luZy5rOHMuaW8vdjEvSW5ncmVzcyIgfX0gICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgc2VydmljZToKICAgICAgICAgICAgICAgIG5hbWU6IHt7IC5zZXJ2aWNlTmFtZSB9fQogICAgICAgICAgICAgICAgcG9ydDoKICAgICAgICAgICAgICAgICAgbnVtYmVyOiB7eyAuc2VydmljZVBvcnQgfX0KICAgICAgICAgICAgICB7ey0gZWxzZSB9fQogICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiB7eyAuc2VydmljZU5hbWUgfX0gCiAgICAgICAgICAgICAgc2VydmljZVBvcnQ6IHt7IC5zZXJ2aWNlUG9ydCB9fQogICAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHt7IGVsc2UgfX0KICAgICAgICAgIC0ge3stIGlmICQuQ2FwYWJpbGl0aWVzLkFQSVZlcnNpb25zLkhhcyAibmV0d29ya2luZy5rOHMuaW8vdjEvSW5ncmVzcyIgfX0KICAgICAgICAgICAgcGF0aFR5cGU6IEltcGxlbWVudGF0aW9uU3BlY2lmaWMKICAgICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAgICBiYWNrZW5kOgogICAgICAgICAgICB7ey0gaWYgJC5DYXBhYmlsaXRpZXMuQVBJVmVyc2lvbnMuSGFzICJuZXR3b3JraW5nLms4cy5pby92MS9JbmdyZXNzIiB9fQogICAgICAgICAgICAgIHNlcnZpY2U6CiAgICAgICAgICAgICAgICBuYW1lOiB7eyAkZnVsbE5hbWUgfX0KICAgICAgICAgICAgICAgIHBvcnQ6CiAgICAgICAgICAgICAgICAgIG51bWJlcjoge3sgJHN2Y1BvcnQgfX0KICAgICAgICAgICAge3stIGVsc2UgfX0KICAgICAgICAgICAgICBzZXJ2aWNlTmFtZToge3sgJGZ1bGxOYW1lIH19CiAgICAgICAgICAgICAgc2VydmljZVBvcnQ6IHt7ICRzdmNQb3J0IH19CiAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHt7IGVuZCB9fQogIHt7LSBlbmQgfX0Ke3stIGVuZCB9fQ=="
      },
      {
        "name": "templates/pvc.yaml",
        "data": "e3stIGlmIC5WYWx1ZXMucHZjLmVuYWJsZWQgLX19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFBlcnNpc3RlbnRWb2x1bWVDbGFpbQptZXRhZGF0YToKICBuYW1lOiAie3sgaW5jbHVkZSAiZG9ja2VyLXRlbXBsYXRlLmZ1bGxuYW1lIiAuIH19LXB2YyIKc3BlYzoKICBhY2Nlc3NNb2RlczoKICAgIC0gUmVhZFdyaXRlT25jZQogIHJlc291cmNlczoKICAgIHJlcXVlc3RzOgogICAgICBzdG9yYWdlOiB7eyAuVmFsdWVzLnB2Yy5zdG9yYWdlIH19Cnt7IGVuZCB9fQ=="
      },
      {
        "name": "templates/scaled-object-blue-green.yaml",
        "data": "e3stIGlmIGFuZCAobm90ICQuVmFsdWVzLnN0YXRlZnVsc2V0LmVuYWJsZWQpICQuVmFsdWVzLmJsdWVncmVlbi5lbmFibGVkIC19fQp7ey0gaWYgJC5WYWx1ZXMua2VkYS5lbmFibGVkIH19Cnt7LSByYW5nZSAkdiwgJHRhZyA6PSAkLlZhbHVlcy5ibHVlZ3JlZW4uaW1hZ2VUYWdzIH19Cnt7LSAkZnVsbE5hbWUgOj0gaW5jbHVkZSAiZG9ja2VyLXRlbXBsYXRlLmZ1bGxuYW1lIiAkIC19fQphcGlWZXJzaW9uOiBrZWRhLnNoL3YxYWxwaGExCmtpbmQ6IFNjYWxlZE9iamVjdAptZXRhZGF0YToKICBuYW1lOiB7eyAkZnVsbE5hbWUgfX0te3sgJHRhZyB9fQpzcGVjOgogIHNjYWxlVGFyZ2V0UmVmOgogICAgYXBpVmVyc2lvbjogYXBwcy92MQogICAga2luZDogRGVwbG95bWVudAogICAgbmFtZToge3sgJGZ1bGxOYW1lIH19LXt7ICR0YWcgfX0KICBwb2xsaW5nSW50ZXJ2YWw6IHt7ICQuVmFsdWVzLmtlZGEucG9sbGluZ0ludGVydmFsIH19CiAgY29vbGRvd25QZXJpb2Q6IHt7ICQuVmFsdWVzLmtlZGEuY29vbGRvd25QZXJpb2QgfX0KICB7ey0gaWYgZXEgJHRhZyAkLlZhbHVlcy5ibHVlZ3JlZW4uYWN0aXZlSW1hZ2VUYWcgfX0KICBtaW5SZXBsaWNhQ291bnQ6IHt7ICQuVmFsdWVzLmtlZGEubWluUmVwbGljYUNvdW50IH19CiAgbWF4UmVwbGljYUNvdW50OiB7eyAkLlZhbHVlcy5rZWRhLm1heFJlcGxpY2FDb3VudCB9fQogIHt7LSBlbHNlIH19CiAge3stICRrZWRhSHBhRGF0YSA6PSBkaWN0ICJuYW1lIiAkZnVsbE5hbWUgInRhZyIgJC5WYWx1ZXMuYmx1ZWdyZWVuLmFjdGl2ZUltYWdlVGFnIH19CiAge3stICRrZWRhSHBhIDo9IGluY2x1ZGUgImRvY2tlci10ZW1wbGF0ZS5rZWRhSHBhIiAka2VkYUhwYURhdGEgfX0KICBtaW5SZXBsaWNhQ291bnQ6IHt7IChsb29rdXAgImF1dG9zY2FsaW5nL3YyIiAiSG9yaXpvbnRhbFBvZEF1dG9zY2FsZXIiICQuUmVsZWFzZS5OYW1lc3BhY2UgJGtlZGFIcGEpLnN0YXR1cy5jdXJyZW50UmVwbGljYXMgfX0KICBtYXhSZXBsaWNhQ291bnQ6IHt7IChsb29rdXAgImF1dG9zY2FsaW5nL3YyIiAiSG9yaXpvbnRhbFBvZEF1dG9zY2FsZXIiICQuUmVsZWFzZS5OYW1lc3BhY2UgJGtlZGFIcGEpLnN0YXR1cy5jdXJyZW50UmVwbGljYXMgfX0KICB7ey0gZW5kIH19CiAgZmFsbGJhY2s6CiAgICBmYWlsdXJlVGhyZXNob2xkOiB7eyAkLlZhbHVlcy5rZWRhLmZhbGxiYWNrLmZhaWx1cmVUaHJlc2hvbGQgfX0KICAgIHJlcGxpY2FzOiB7eyAkLlZhbHVlcy5rZWRhLmZhbGxiYWNrLmZhaWx1cmVSZXBsaWNhcyB9fQogIGFkdmFuY2VkOgogICAgcmVzdG9yZVRvT3JpZ2luYWxSZXBsaWNhQ291bnQ6IGZhbHNlCiAgICBob3Jpem9udGFsUG9kQXV0b3NjYWxlckNvbmZpZzoKICAgICAgYmVoYXZpb3I6CiAgICAgICAgc2NhbGVVcDoKICAgICAgICAgIHN0YWJpbGl6YXRpb25XaW5kb3dTZWNvbmRzOiB7eyAkLlZhbHVlcy5rZWRhLmhwYS5zY2FsZVVwLnN0YWJpbGl6YXRpb25XaW5kb3dTZWNvbmRzIH19CiAgICAgICAgICBwb2xpY2llczoKICAgICAgICAgIC0gdHlwZToge3sgJC5WYWx1ZXMua2VkYS5ocGEuc2NhbGVVcC5wb2xpY3kudHlwZSB9fQogICAgICAgICAgICB2YWx1ZToge3sgJC5WYWx1ZXMua2VkYS5ocGEuc2NhbGVVcC5wb2xpY3kudmFsdWUgfX0KICAgICAgICAgICAgcGVyaW9kU2Vjb25kczoge3sgJC5WYWx1ZXMua2VkYS5ocGEuc2NhbGVVcC5wb2xpY3kucGVyaW9kU2Vjb25kcyB9fQogICAgICAgIHNjYWxlRG93bjoKICAgICAgICAgIHN0YWJpbGl6YXRpb25XaW5kb3dTZWNvbmRzOiB7eyAkLlZhbHVlcy5rZWRhLmhwYS5zY2FsZURvd24uc3RhYmlsaXphdGlvbldpbmRvd1NlY29uZHMgfX0KICAgICAgICAgIHBvbGljaWVzOgogICAgICAgICAgLSB0eXBlOiB7eyAkLlZhbHVlcy5rZWRhLmhwYS5zY2FsZURvd24ucG9saWN5LnR5cGUgfX0KICAgICAgICAgICAgdmFsdWU6IHt7ICQuVmFsdWVzLmtlZGEuaHBhLnNjYWxlRG93bi5wb2xpY3kudmFsdWUgfX0KICAgICAgICAgICAgcGVyaW9kU2Vjb25kczoge3sgJC5WYWx1ZXMua2VkYS5ocGEuc2NhbGVEb3duLnBvbGljeS5wZXJpb2RTZWNvbmRzIH19CiAge3stIGlmICQuVmFsdWVzLmtlZGEudHJpZ2dlciB9fQogIHRyaWdnZXJzOgogICAgLSB0eXBlOiBwcm9tZXRoZXVzCiAgICAgIG1ldHJpY1R5cGU6IHt7ICQuVmFsdWVzLmtlZGEudHJpZ2dlci5tZXRyaWNUeXBlIH19CiAgICAgIG1ldGFkYXRhOgogICAgICAgIHNlcnZlckFkZHJlc3M6IGh0dHA6Ly9wcm9tZXRoZXVzLXNlcnZlci5tb25pdG9yaW5nLnN2Yy5jbHVzdGVyLmxvY2FsOjgwCiAgICAgICAgbWV0cmljTmFtZToge3sgJC5WYWx1ZXMua2VkYS50cmlnZ2VyLm1ldHJpY05hbWUgfX0KICAgICAgICBxdWVyeToge3sgJC5WYWx1ZXMua2VkYS50cmlnZ2VyLm1ldHJpY1F1ZXJ5IH19CiAgICAgICAgdGhyZXNob2xkOiAne3sgJC5WYWx1ZXMua2VkYS50cmlnZ2VyLm1ldHJpY1RocmVzaG9sZCB9fScKICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMua2VkYS50cmlnZ2VycyB9fQogIHRyaWdnZXJzOgogIHt7LSB0b1lhbWwgJC5WYWx1ZXMua2VkYS50cmlnZ2VycyB8IG5pbmRlbnQgNCB9fQogIHt7LSBlbmQgfX0Ke3stIGlmIG5vdCAoZXEgJHYgKHN1YiAobGVuICQuVmFsdWVzLmJsdWVncmVlbi5pbWFnZVRhZ3MpIDEpICkgfX0KLS0tCnt7LSBlbmQgfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0="
      },
      {
        "name": "templates/scaled-object.yaml",
        "data": "e3stIGlmIGFuZCAobm90IC5WYWx1ZXMuYmx1ZWdyZWVuLmVuYWJsZWQpIC5WYWx1ZXMua2VkYS5lbmFibGVkIC19fQp7ey0gJGZ1bGxOYW1lIDo9IGluY2x1ZGUgImRvY2tlci10ZW1wbGF0ZS5mdWxsbmFtZSIgJCAtfX0KYXBpVmVyc2lvbjoga2VkYS5zaC92MWFscGhhMQpraW5kOiBTY2FsZWRPYmplY3QKbWV0YWRhdGE6CiAgbmFtZToge3sgJGZ1bGxOYW1lIH19CnNwZWM6CiAgc2NhbGVUYXJnZXRSZWY6CiAgICBhcGlWZXJzaW9uOiBhcHBzL3YxCiAgICBraW5kOiBEZXBsb3ltZW50CiAgICBuYW1lOiB7eyAkZnVsbE5hbWUgfX0KICBwb2xsaW5nSW50ZXJ2YWw6IHt7IC5WYWx1ZXMua2VkYS5wb2xsaW5nSW50ZXJ2YWwgfX0KICBjb29sZG93blBlcmlvZDoge3sgLlZhbHVlcy5rZWRhLmNvb2xkb3duUGVyaW9kIH19CiAgbWluUmVwbGljYUNvdW50OiB7eyAuVmFsdWVzLmtlZGEubWluUmVwbGljYUNvdW50IH19CiAgbWF4UmVwbGljYUNvdW50OiB7eyAuVmFsdWVzLmtlZGEubWF4UmVwbGljYUNvdW50IH19CiAgZmFsbGJhY2s6CiAgICBmYWlsdXJlVGhyZXNob2xkOiB7eyAuVmFsdWVzLmtlZGEuZmFsbGJhY2suZmFpbHVyZVRocmVzaG9sZCB9fQogICAgcmVwbGljYXM6IHt7IC5WYWx1ZXMua2VkYS5mYWxsYmFjay5mYWlsdXJlUmVwbGljYXMgfX0KICBhZHZhbmNlZDoKICAgIHJlc3RvcmVUb09yaWdpbmFsUmVwbGljYUNvdW50OiBmYWxzZQogICAgaG9yaXpvbnRhbFBvZEF1dG9zY2FsZXJDb25maWc6CiAgICAgIGJlaGF2aW9yOgogICAgICAgIHNjYWxlVXA6CiAgICAgICAgICBzdGFiaWxpemF0aW9uV2luZG93U2Vjb25kczoge3sgLlZhbHVlcy5rZWRhLmhwYS5zY2FsZVVwLnN0YWJpbGl6YXRpb25XaW5kb3dTZWNvbmRzIH19CiAgICAgICAgICBwb2xpY2llczoKICAgICAgICAgIC0gdHlwZToge3sgLlZhbHVlcy5rZWRhLmhwYS5zY2FsZVVwLnBvbGljeS50eXBlIH19CiAgICAgICAgICAgIHZhbHVlOiB7eyAuVmFsdWVzLmtlZGEuaHBhLnNjYWxlVXAucG9saWN5LnZhbHVlIH19CiAgICAgICAgICAgIHBlcmlvZFNlY29uZHM6IHt7IC5WYWx1ZXMua2VkYS5ocGEuc2NhbGVVcC5wb2xpY3kucGVyaW9kU2Vjb25kcyB9fQogICAgICAgIHNjYWxlRG93bjoKICAgICAgICAgIHN0YWJpbGl6YXRpb25XaW5kb3dTZWNvbmRzOiB7eyAuVmFsdWVzLmtlZGEuaHBhLnNjYWxlRG93bi5zdGFiaWxpemF0aW9uV2luZG93U2Vjb25kcyB9fQogICAgICAgICAgcG9saWNpZXM6CiAgICAgICAgICAtIHR5cGU6IHt7IC5WYWx1ZXMua2VkYS5ocGEuc2NhbGVEb3duLnBvbGljeS50eXBlIH19CiAgICAgICAgICAgIHZhbHVlOiB7eyAuVmFsdWVzLmtlZGEuaHBhLnNjYWxlRG93bi5wb2xpY3kudmFsdWUgfX0KICAgICAgICAgICAgcGVyaW9kU2Vjb25kczoge3sgLlZhbHVlcy5rZWRhLmhwYS5zY2FsZURvd24ucG9saWN5LnBlcmlvZFNlY29uZHMgfX0KICB7ey0gaWYgLlZhbHVlcy5rZWRhLnRyaWdnZXIgfX0KICB0cmlnZ2VyczoKICAgIC0gdHlwZTogcHJvbWV0aGV1cwogICAgICBtZXRyaWNUeXBlOiB7eyAuVmFsdWVzLmtlZGEudHJpZ2dlci5tZXRyaWNUeXBlIH19CiAgICAgIG1ldGFkYXRhOgogICAgICAgIHNlcnZlckFkZHJlc3M6IGh0dHA6Ly9wcm9tZXRoZXVzLXNlcnZlci5tb25pdG9yaW5nLnN2Yy5jbHVzdGVyLmxvY2FsOjgwCiAgICAgICAgbWV0cmljTmFtZToge3sgLlZhbHVlcy5rZWRhLnRyaWdnZXIubWV0cmljTmFtZSB9fQogICAgICAgIHF1ZXJ5OiB7eyAuVmFsdWVzLmtlZGEudHJpZ2dlci5tZXRyaWNRdWVyeSB9fQogICAgICAgIHRocmVzaG9sZDogJ3t7IC5WYWx1ZXMua2VkYS50cmlnZ2VyLm1ldHJpY1RocmVzaG9sZCB9fScKICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMua2VkYS50cmlnZ2VycyB9fQogIHRyaWdnZXJzOgogIHt7LSB0b1lhbWwgLlZhbHVlcy5rZWRhLnRyaWdnZXJzIHwgbmluZGVudCA0IH19CiAge3stIGVuZCB9fQp7ey0gZW5kIH19"
      },
      {
        "name": "templates/service.yaml",
        "data": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiB7eyBpbmNsdWRlICJkb2NrZXItdGVtcGxhdGUuZnVsbG5hbWUiIC4gfX0KICBsYWJlbHM6CiAgICB7ey0gaW5jbHVkZSAiZG9ja2VyLXRlbXBsYXRlLmxhYmVscyIgLiB8IG5pbmRlbnQgNCB9fQogIHt7LSBpZiAuVmFsdWVzLnNlcnZpY2UuYW5ub3RhdGlvbnMgfX0KICB7ey0gaWYgZ3QgKGxlbiAuVmFsdWVzLnNlcnZpY2UuYW5ub3RhdGlvbnMpIDB9fQogIGFubm90YXRpb25zOgogICAge3stIHJhbmdlICRrLCAkdiA6PSAuVmFsdWVzLnNlcnZpY2UuYW5ub3RhdGlvbnMgfX0KICAgIHt7ICRrIH19OiB7eyAkdiB9fQogICAge3stIGVuZCB9fQogIHt7LSBlbmQgfX0KICB7ey0gZW5kIH19CnNwZWM6CiAge3sgaWYgb3IgLlZhbHVlcy5pbmdyZXNzLmVuYWJsZWQgLlZhbHVlcy5hbGJJbmdyZXNzLmVuYWJsZWQgLlZhbHVlcy5jdXN0b21Ob2RlUG9ydC5lbmFibGVkIH19CiAgdHlwZTogTm9kZVBvcnQKICB7eyBlbHNlIH19CiAgdHlwZTogQ2x1c3RlcklQCiAge3sgZW5kIH19CiAgcG9ydHM6CiAgICAtIHBvcnQ6IHt7IC5WYWx1ZXMuc2VydmljZS5wb3J0IH19CiAgICAgIHRhcmdldFBvcnQ6IGh0dHAKICAgICAgcHJvdG9jb2w6IFRDUAogICAgICBuYW1lOiBodHRwCiAgICAgIHt7LSBpZiBhbmQgLlJlbGVhc2UuSXNVcGdyYWRlIChub3QgLlZhbHVlcy5pbmdyZXNzLmVuYWJsZWQpIH19CiAgICAgIG5vZGVQb3J0OiBudWxsCiAgICAgIHt7LSBlbHNlIGlmIC5WYWx1ZXMuY3VzdG9tTm9kZVBvcnQuZW5hYmxlZCB9fQogICAgICBub2RlUG9ydDoge3sgLlZhbHVlcy5jdXN0b21Ob2RlUG9ydC5wb3J0IH19CiAgICAgIHt7LSBlbmQgfX0KICB7ey0gcmFuZ2UgLlZhbHVlcy5zZXJ2aWNlLmV4dHJhUG9ydHMgfX0KICAgIC0gcG9ydDoge3sgLnBvcnQgfX0KICAgICAgdGFyZ2V0UG9ydDoge3sgLnRhcmdldFBvcnQgfX0KICAgICAgcHJvdG9jb2w6IFRDUAogICAgICBuYW1lOiB7eyAubmFtZSB9fQogICAgICB7ey0gaWYgYW5kICQuUmVsZWFzZS5Jc1VwZ3JhZGUgKG5vdCAkLlZhbHVlcy5pbmdyZXNzLmVuYWJsZWQpIH19CiAgICAgIG5vZGVQb3J0OiBudWxsCiAgICAgIHt7LSBlbmQgfX0KICB7ey0gZW5kIH19CiAgc2VsZWN0b3I6CiAgICB7ey0gaW5jbHVkZSAiZG9ja2VyLXRlbXBsYXRlLnNlbGVjdG9yTGFiZWxzIiAuIHwgbmluZGVudCA0IH19CiAgICB7ey0gaWYgYW5kIC5WYWx1ZXMuYmx1ZWdyZWVuLmVuYWJsZWQgLlZhbHVlcy5ibHVlZ3JlZW4uZGlzYWJsZVByaW1hcnlEZXBsb3ltZW50ICguVmFsdWVzLmJsdWVncmVlbi5pbWFnZVRhZ3MgfCBsZW4gfCBlcSAwIHwgbm90KSB9fQogICAgcG9ydGVyLnJ1bi9ibHVlLWdyZWVuLXZhbHVlOiB7eyAuVmFsdWVzLmJsdWVncmVlbi5hY3RpdmVJbWFnZVRhZyB8IHF1b3RlIH19CiAgICB7ey0gZW5kIH19"
      },
      {
        "name": "templates/serviceaccount.yaml",
        "data": "e3stIGlmIC5WYWx1ZXMuc2VydmljZUFjY291bnQuY3JlYXRlIC19fQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlQWNjb3VudAptZXRhZGF0YToKICBuYW1lOiB7eyBpbmNsdWRlICJkb2NrZXItdGVtcGxhdGUuc2VydmljZUFjY291bnROYW1lIiAuIH19CiAgbGFiZWxzOgogICAge3stIGluY2x1ZGUgImRvY2tlci10ZW1wbGF0ZS5sYWJlbHMiIC4gfCBuaW5kZW50IDQgfX0KICB7ey0gd2l0aCAuVmFsdWVzLnNlcnZpY2VBY2NvdW50LmFubm90YXRpb25zIH19CiAgYW5ub3RhdGlvbnM6CiAgICB7ey0gdG9ZYW1sIC4gfCBuaW5kZW50IDQgfX0KICB7ey0gZW5kIH19Cnt7LSBlbmQgfX0K"
      },
      {
        "name": "templates/tests/test-connection.yaml",
        "data": "YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWU6ICJ7eyBpbmNsdWRlICJkb2NrZXItdGVtcGxhdGUuZnVsbG5hbWUiIC4gfX0tdGVzdC1jb25uZWN0aW9uIgogIGxhYmVsczoKICAgIHt7LSBpbmNsdWRlICJkb2NrZXItdGVtcGxhdGUubGFiZWxzIiAuIHwgbmluZGVudCA0IH19CiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogdGVzdC1zdWNjZXNzCnNwZWM6CiAgY29udGFpbmVyczoKICAgIC0gbmFtZTogd2dldAogICAgICBpbWFnZTogYnVzeWJveAogICAgICBjb21tYW5kOiBbJ3dnZXQnXQogICAgICBhcmdzOiBbJ3t7IGluY2x1ZGUgImRvY2tlci10ZW1wbGF0ZS5mdWxsbmFtZSIgLiB9fTp7eyAuVmFsdWVzLnNlcnZpY2UucG9ydCB9fSddCiAgcmVzdGFydFBvbGljeTogTmV2ZXIK"
      }
    ],
    "values": {
      "albIngress": {
        "annotations": null,
        "certificate_arn": null,
        "custom_paths": [],
        "enabled": false,
        "external_dns": false,
        "group_name": null,
        "group_order": null,
        "healthcheck_healthy_threshold_count": null,
        "healthcheck_interval_seconds": null,
        "healthcheck_path": null,
        "healthcheck_port": null,
        "healthcheck_protocol": null,
        "healthcheck_success_codes": null,
        "healthcheck_timeout_seconds": null,
        "healthcheck_unhealthy_threshold_count": null,
        "hosts": [],
        "scheme": "internet-facing",
        "security_groups": null,
        "target_node_labels": null,
        "target_type": "ip",
        "wafv2_acl_arn": null
      },
      "auto_deploy": true,
      "autoscaling": {
        "enabled": false,
        "maxReplicas": 10,
        "minReplicas": 1,
        "targetCPUUtilizationPercentage": 50,
        "targetMemoryUtilizationPercentage": 50
      },
      "bluegreen": {
        "disablePrimaryDeployment": false,
        "enabled": false,
        "imageTags": []
      },
      "cloudsql": {
        "additionalConnection": {
          "connectionName": "",
          "dbPort": 5432,
          "enabled": false
        },
        "connectionName": "",
        "dbPort": 5432,
        "enabled": false,
        "serviceAccountJSON": ""
      },
      "container": {
        "args": null,
        "command": null,
        "env": {
          "normal": null
        },
        "lifecycle": {
          "postStart": null,
          "preStop": null
        },
        "port": 80
      },
      "customNodePort": {
        "enabled": false,
        "port": 30000
      },
      "datadog": {
        "enabled": false
      },
      "emptyDir": {
        "enabled": false,
        "mountPath": "/mypath"
      },
      "health": {
        "livenessCommand": {
          "command": "ls -l",
          "enabled": false,
          "failureThreshold": 3,
          "initialDelaySeconds": 5,
          "periodSeconds": 5,
          "successThreshold": 1,
          "timeoutSeconds": 1
        },
        "livenessProbe": {
          "auth": {
            "enabled": false,
            "password": "",
            "username": ""
          },
          "enabled": false,
          "failureThreshold": 3,
          "httpHeaders": [],
          "initialDelaySeconds": 0,
          "path": "/livez",
          "periodSeconds": 5,
          "scheme": "HTTP",
          "successThreshold": 1,
          "timeoutSeconds": 1
        },
        "readinessProbe": {
          "auth": {
            "enabled": false,
            "password": "",
            "username": ""
          },
          "enabled": false,
          "failureThreshold": 3,
          "httpHeaders": [],
          "initialDelaySeconds": 0,
          "path": "/readyz",
          "periodSeconds": 5,
          "scheme": "HTTP",
          "successThreshold": 1,
          "timeoutSeconds": 1
        },
        "startupProbe": {
          "auth": {
            "enabled": false,
            "password": "",
            "username": ""
          },
          "enabled": false,
          "failureThreshold": 3,
          "httpHeaders": [],
          "path": "/startupz",
          "periodSeconds": 5,
          "scheme": "HTTP",
          "timeoutSeconds": 1
        }
      },
      "hostAliases": [],
      "image": {
        "pullPolicy": "Always",
        "repository": "public.ecr.aws/o1j4x7p4/hello-porter",
        "tag": "latest"
      },
      "ingress": {
        "annotations": {},
        "customTls": {
          "customTlsSecret": null,
          "enabled": false
        },
        "custom_domain": false,
        "custom_paths": [],
        "enabled": true,
        "hosts": [],
        "porter_hosts": [],
        "provider": "aws",
        "rewriteCustomPathsEnabled": true,
        "tls": true,
        "useDefaultIngressTLSSecret": false,
        "wildcard": false
      },
      "keda": {
        "cooldownPeriod": 300,
        "enabled": false,
        "fallback": {
          "failureReplicas": 6,
          "failureThreshold": 3
        },
        "hpa": {
          "scaleDown": {
            "policy": {
              "periodSeconds": 300,
              "type": "Percent",
              "value": 10
            },
            "stabilizationWindowSeconds": 300
          },
          "scaleUp": {
            "policy": {
              "periodSeconds": 300,
              "type": "Percent",
              "value": 10
            },
            "stabilizationWindowSeconds": 300
          }
        },
        "maxReplicaCount": 10,
        "minReplicaCount": 1,
        "pollingInterval": 30,
        "trigger": {
          "metricName": "",
          "metricQuery": "",
          "metricThreshold": "",
          "metricType": "AverageValue"
        },
        "triggers": []
      },
      "nodeSelector": {},
      "podLabels": {},
      "privateIngress": {
        "annotations": {},
        "clusterIssuer": "letsencrypt-prod-private",
        "custom_paths": [],
        "enabled": false,
        "hosts": [],
        "privateIngressClass": null,
        "tls": false
      },
      "pvc": {
        "enabled": false,
        "existingVolume": "",
        "mountPath": "/mypath",
        "storage": "20Gi"
      },
      "replicaCount": 1,
      "resources": {
        "requests": {
          "cpu": "100m",
          "memory": "256Mi"
        }
      },
      "service": {
        "port": 80
      },
      "serviceAccount": {
        "annotations": {},
        "create": true,
        "name": ""
      },
      "stack": {
        "enabled": false,
        "name": "",
        "revision": 0
      },
      "statefulset": {
        "enabled": false
      },
      "terminationGracePeriodSeconds": 30,
      "tolerations": [],
      "topology": {
        "enabled": false,
        "labelSelector": {
          "enabled": false,
          "matchLabels": {}
        },
        "maxSkew": null,
        "topologyKey": null,
        "whenUnsatisfiable": null
      }
    },
    "schema": null,
    "files": [
      {
        "name": ".helmignore",
        "data": "IyBQYXR0ZXJucyB0byBpZ25vcmUgd2hlbiBidWlsZGluZyBwYWNrYWdlcy4KIyBUaGlzIHN1cHBvcnRzIHNoZWxsIGdsb2IgbWF0Y2hpbmcsIHJlbGF0aXZlIHBhdGggbWF0Y2hpbmcsIGFuZAojIG5lZ2F0aW9uIChwcmVmaXhlZCB3aXRoICEpLiBPbmx5IG9uZSBwYXR0ZXJuIHBlciBsaW5lLgouRFNfU3RvcmUKIyBDb21tb24gVkNTIGRpcnMKLmdpdC8KLmdpdGlnbm9yZQouYnpyLwouYnpyaWdub3JlCi5oZy8KLmhnaWdub3JlCi5zdm4vCiMgQ29tbW9uIGJhY2t1cCBmaWxlcwoqLnN3cAoqLmJhawoqLnRtcAoqLm9yaWcKKn4KIyBWYXJpb3VzIElERXMKLnByb2plY3QKLmlkZWEvCioudG1wcm9qCi52c2NvZGUvCg=="
      },
      {
        "name": "README.md",
        "data": "IyBXZWIgU2VydmljZQoKV2ViIHNlcnZpY2VzIGFyZSBkZXBsb3llZCBmb3IgcHJvY2Vzc2VzIHRoYXQgYXJlIGNvbnN0YW50bHkgcnVubmluZywgbGlrZSBzZXJ2ZXJzLiBNb3N0IGRlcGxveW1lbnRzIHNob3VsZCBmYWxsIGludG8gdGhpcyBjYXRlZ29yeS4gWW91IGNhbiBjaG9vc2UgdG8gZGVwbG95IGEgd2ViIHNlcnZpY2UgZnJvbSB5b3VyIGdpdCByZXBvc2l0b3J5IG9yIGRvY2tlciBpbWFnZSByZWdpc3RyeS4gSWYgeW91ciBzdGFjayBpcyBkb2NrZXJpemVkLCBzcGVjaWZ5IGEgYERvY2tlcmZpbGVgIHlvdSB3YW50IHRvIGJ1aWxkIHdpdGguIElmIHlvdXIgc3RhY2sgaXMgbm90IGRvY2tlcml6ZWQsIFBvcnRlciBhdXRvbWF0aWNhbGx5IGRldGVjdHMgeW91ciBzdGFjayBhbmQgYnVpbGRzIHlvdXIgYXBwbGljYXRpb24gdXNpbmcgW0Nsb3VkIE5hdGl2ZSBCdWlsZHBhY2tzXShodHRwczovL2J1aWxkcGFja3MuaW8vKS4KCllvdSBjYW4gY2hvb3NlIHRvIGV4cG9zZSB5b3VyIGFwcGxpY2F0aW9uIHRvIGV4dGVybmFsIHRyYWZmaWMgb24gYSBjdXN0b20gZG9tYWluIC0gc2VjdXJlZCBhdXRvbWF0aWNhbGx5IGJ5IFBvcnRlciB3aXRoIFNTTCBjZXJ0aWZpY2F0ZXMgLSBvciB5b3UgY2FuIGV4cG9zZSB5b3VyIGFwcGxpY2F0aW9uIG9ubHkgdG8gaW50ZXJuYWwgdHJhZmZpYyAoaS5lLiBhY2Nlc3NpYmxlIG9ubHkgYnkgYXBwbGljYXRpb25zIHdpdGhpbiB0aGUgY2x1c3RlcikuCgpBZGRpdGlvbmFsbHksIHNlZSB0aGUgKipBZHZhbmNlZCoqIHRhYiB0byBjb25maWd1cmUgaGVhbHRoIGNoZWNrIGVuZHBvaW50cyBmb3IgemVybyBkb3duLXRpbWUgZGVwbG95bWVudHMgb3IgZW5hYmxlIHBlcnNpc3RlbmNlIG9uIHlvdXIgZGVwbG95bWVudHMu"
      },
      {
        "name": "form.yaml",
        "data": ""
      },
      {
        "name": "upgrade.yaml",
        "data": "dXBncmFkZV9ub3RlczoKICAtIHByZXZpb3VzOiB2MC4xMS4wCiAgICB0YXJnZXQ6IHYwLjEyLjAKICAgIG5vdGU6IHwKICAgICAgYHYwLjExLjBgIGFkZGVkIHN1cHBvcnQgZm9yIGNvbmZpZ3VyaW5nIHRoZSB0aW1lIGludGVydmFsIG9mIHRoZSByZWFkaW5lc3MgcHJvYmUuIFRoaXMgc2V0cyB0aGUgcGVyaW9kIGJldHdlZW4gc3VjY2Vzc2l2ZSByZWFkaW5lc3MgcHJvYmUgcXVlcmllcyBvbiB0aGUgaGVhbHRoIGNoZWNrIGVuZHBvaW50LiBUaGlzIHVwZGF0ZSBpcyBiYWNrd2FyZHMtY29tcGF0aWJsZS4KICAtIHByZXZpb3VzOiB2MC4xMi4wCiAgICB0YXJnZXQ6IHYwLjEzLjAKICAgIG5vdGU6IHwKICAgICAgYHYwLjEzLjBgIGFkZGVkIHN1cHBvcnQgZm9yIGRpc3BsYXlpbmcgdGhlIHJldmlzaW9uIG51bWJlcnMgYXR0YWNoZWQgdG8gZWFjaCBwb2QgaW4gdGhlIFBvcnRlciBkYXNoYm9hcmQsIGJ5IHBhc3NpbmcgdGhlIHJldmlzaW9uIG51bWJlciB0byB0aGUgcG9kIG1ldGFkYXRhLiBUaGlzIHVwZGF0ZSBpcyBiYWNrd2FyZHMtY29tcGF0aWJsZS4KICAtIHByZXZpb3VzOiB2MC4xMy4wCiAgICB0YXJnZXQ6IHYwLjE0LjAKICAgIG5vdGU6IHwKICAgICAgYHYwLjE0LjBgIGZpeGVkIHRoZSBwYXJzaW5nIGlzc3VlIG9uIHRoZSBgUE9SVEVSX1BPRF9JTUFHRV9UQUdgIHZhcmlhYmxlIHRoYXQncyBpbmplY3RlZCBpbnRvIHRoZSBjb250YWluZXIuCiAgLSBwcmV2aW91czogdjAuMzkuMAogICAgdGFyZ2V0OiB2MC40MC4wCiAgICBub3RlOiB8CiAgICAgICoqV0FSTklORyoqOiB0aGlzIG1heSBub3QgYmUgYmFja3dhcmRzIGNvbXBhdGlibGUgd2l0aCB5b3VyIGNvbmZpZ3VyYXRpb24uCgogICAgICBgdjAuNDAuMGAgZml4ZXMgYW4gaXNzdWUgd2hlcmUgbm90IHNldHRpbmcgdGhlIGxpdmVuZXNzIHByb2JlIGhlYWx0aCBjaGVjayBwcmV2ZW50cyBvdGhlciBoZWFsdGggY2hlY2tzIGZyb20gYmVpbmcgZW5hYmxlZC4gSWYgeW91IGhhdmUgaGVhbHRoIGNoZWNrcyBlbmFibGVkLCBwbGVhc2UgZG91YmxlLWNoZWNrIHRoZSAqKkFkdmFuY2VkKiogdGFiIGFmdGVyIHVwZ3JhZGluZyBhbmQgbWFrZSBzdXJlIHlvdXIgaGVhbHRoIGNoZWNrcyBhcmUgc2V0IGNvcnJlY3RseS4K"
      },
      {
        "name": "validate.json",
        "data": ""
      }
    ]
  },
  "config": {
    "auto_deploy": true,
    "autoscaling": {
      "enabled": false
    },
    "clusterId": 1,
    "container": {
      "env": {
        "normal": null
      },
      "lifecycle": {},
      "port": 80
    },
    "currentCluster": {
      "service": {
        "is_aws": false,
        "is_do": false,
        "is_gcp": false
      }
    },
    "health": {
      "livenessProbe": {
        "enabled": false
      },
      "readinessProbe": {
        "enabled": false
      },
      "startupProbe": {
        "enabled": false
      }
    },
    "image": {
      "repository": "nginx",
      "tag": "latest"
    },
    "ingress": {
      "annotations": {},
      "custom_domain": false,
      "enabled": false,
      "provider": ""
    },
    "namespace": "default",
    "replicaCount": 1,
    "resources": {
      "requests": {
        "cpu": "100m",
        "memory": "256Mi"
      }
    },
    "showStartCommand": true,
    "terminationGracePeriodSeconds": 30
  },
  "manifest": "---\n# Source: web/templates/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: porter-web\n  labels:\n    helm.sh/chart: web-0.136.0\n    app.kubernetes.io/name: web\n    app.kubernetes.io/instance: porter\n    app.kubernetes.io/version: \"1.25.0\"\n    app.kubernetes.io/managed-by: Helm\n---\n# Source: web/templates/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: porter-web\n  labels:\n    helm.sh/chart: web-0.136.0\n    app.kubernetes.io/name: web\n    app.kubernetes.io/instance: porter\n    app.kubernetes.io/version: \"1.25.0\"\n    app.kubernetes.io/managed-by: Helm\nspec:\n  \n  type: ClusterIP\n  \n  ports:\n    - port: 80\n      targetPort: http\n      protocol: TCP\n      name: http\n  selector:\n    app.kubernetes.io/name: web\n    app.kubernetes.io/instance: porter\n---\n# Source: web/templates/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: porter-web\n  labels:\n    helm.sh/chart: web-0.136.0\n    app.kubernetes.io/name: web\n    app.kubernetes.io/instance: porter\n    app.kubernetes.io/version: \"1.25.0\"\n    app.kubernetes.io/managed-by: Helm\nspec:\n  replicas: 1\n  \n  \n  selector:\n    matchLabels:\n      app.kubernetes.io/name: web\n      app.kubernetes.io/instance: porter\n  template:\n    metadata:\n      annotations:\n        helm.sh/revision: \"1\"\n      labels:\n        app.kubernetes.io/name: web\n        app.kubernetes.io/instance: porter\n        porter.run/application-name: \"porter\"\n    spec:\n      serviceAccountName: porter-web\n      terminationGracePeriodSeconds: 30\n      hostAliases:\n        []\n      securityContext:\n        null\n      containers:\n        - name: web\n          securityContext:\n            null\n          image: \"nginx:latest\"\n          imagePullPolicy: Always\n          ports:\n            - name: http\n              containerPort: 80\n              protocol: TCP\n          \n          \n          \n          \n          resources:\n            requests:\n              cpu: 100m\n              memory: 256Mi\n            limits:\n              memory: 256Mi\n          \n          \n          env:\n            # Porter default environment variables\n            - name: PORTER_RESOURCES_RAM\n              value: \"256Mi\"\n            - name: PORTER_RESOURCES_CPU\n              value: \"100m\"\n            - name: PORTER_RESOURCES_REPLICAS\n              value: \"1\"\n            - name: PORTER_NODE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n            - name: PORTER_POD_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.name\n            - name: PORTER_POD_IP\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n            - name: PORTER_POD_IMAGE_TAG\n              value: \"latest\"\n            - name: PORTER_POD_REVISION\n              value: \"1\"\n            \n          \n          \n      tolerations:\n        - key: \"removable\"\n          operator: \"Equal\"\n          value: \"true\"\n          effect: \"NoSchedule\"\n",
  "hooks": [
    {
      "name": "porter-web-test-connection",
      "kind": "Pod",
      "path": "web/templates/tests/test-connection.yaml",
      "manifest": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: \"porter-web-test-connection\"\n  labels:\n    helm.sh/chart: web-0.136.0\n    app.kubernetes.io/name: web\n    app.kubernetes.io/instance: porter\n    app.kubernetes.io/version: \"1.25.0\"\n    app.kubernetes.io/managed-by: Helm\n  annotations:\n    \"helm.sh/hook\": test-success\nspec:\n  containers:\n    - name: wget\n      image: busybox\n      command: ['wget']\n      args: ['porter-web:80']\n  restartPolicy: Never",
      "events": [
        "test"
      ],
      "last_run": {
        "started_at": "",
        "completed_at": "",
        "phase": ""
      }
    }
  ],
  "version": 1,
  "namespace": "porter-stack-a"
}
