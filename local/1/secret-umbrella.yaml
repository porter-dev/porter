{
  "name": "a",
  "info": {
    "first_deployed": "2023-09-05T22:52:44.480159294Z",
    "last_deployed": "2023-09-05T22:52:44.480159294Z",
    "deleted": "",
    "description": "Install complete",
    "status": "deployed"
  },
  "chart": {
    "metadata": {
      "name": "umbrella",
      "home": "https://getporter.dev/",
      "version": "0.96.0",
      "description": "Web application that is exposed to external traffic.",
      "keywords": [
        "porter",
        "application",
        "service",
        "umbrella"
      ],
      "icon": "https://user-images.githubusercontent.com/65516095/111255214-07d3da80-85ed-11eb-99e2-fddcbdb99bdb.png",
      "apiVersion": "v2",
      "dependencies": [
        {
          "name": "asdf-web",
          "version": "0.136.0",
          "repository": "http://chartmuseum:8080",
          "enabled": true,
          "alias": "asdf-web"
        }
      ],
      "type": "application"
    },
    "lock": null,
    "templates": null,
    "values": {
      "asdf-web": {
        "albIngress": {
          "custom_paths": [],
          "enabled": false,
          "external_dns": false,
          "hosts": [],
          "scheme": "internet-facing",
          "target_type": "ip"
        },
        "auto_deploy": true,
        "autoscaling": {
          "enabled": false,
          "maxReplicas": 10,
          "minReplicas": 1,
          "targetCPUUtilizationPercentage": 50,
          "targetMemoryUtilizationPercentage": 50
        },
        "bluegreen": {
          "disablePrimaryDeployment": false,
          "enabled": false,
          "imageTags": []
        },
        "cloudsql": {
          "additionalConnection": {
            "connectionName": "",
            "dbPort": 5432,
            "enabled": false
          },
          "connectionName": "",
          "dbPort": 5432,
          "enabled": false,
          "serviceAccountJSON": ""
        },
        "container": {
          "args": null,
          "command": null,
          "env": {
            "normal": null
          },
          "lifecycle": {},
          "port": 80
        },
        "customNodePort": {
          "enabled": false,
          "port": 30000
        },
        "datadog": {
          "enabled": false
        },
        "emptyDir": {
          "enabled": false,
          "mountPath": "/mypath"
        },
        "global": {
          "image": {
            "repository": "nginx",
            "tag": "latest"
          }
        },
        "health": {
          "livenessCommand": {
            "command": "ls -l",
            "enabled": false,
            "failureThreshold": 3,
            "initialDelaySeconds": 5,
            "periodSeconds": 5,
            "successThreshold": 1,
            "timeoutSeconds": 1
          },
          "livenessProbe": {
            "auth": {
              "enabled": false,
              "password": "",
              "username": ""
            },
            "enabled": false,
            "failureThreshold": 3,
            "httpHeaders": [],
            "initialDelaySeconds": 0,
            "path": "/livez",
            "periodSeconds": 5,
            "scheme": "HTTP",
            "successThreshold": 1,
            "timeoutSeconds": 1
          },
          "readinessProbe": {
            "auth": {
              "enabled": false,
              "password": "",
              "username": ""
            },
            "enabled": false,
            "failureThreshold": 3,
            "httpHeaders": [],
            "initialDelaySeconds": 0,
            "path": "/readyz",
            "periodSeconds": 5,
            "scheme": "HTTP",
            "successThreshold": 1,
            "timeoutSeconds": 1
          },
          "startupProbe": {
            "auth": {
              "enabled": false,
              "password": "",
              "username": ""
            },
            "enabled": false,
            "failureThreshold": 3,
            "httpHeaders": [],
            "path": "/startupz",
            "periodSeconds": 5,
            "scheme": "HTTP",
            "timeoutSeconds": 1
          }
        },
        "hostAliases": [],
        "image": {
          "pullPolicy": "Always",
          "repository": "public.ecr.aws/o1j4x7p4/hello-porter",
          "tag": "latest"
        },
        "ingress": {
          "annotations": {},
          "customTls": {
            "enabled": false
          },
          "custom_domain": false,
          "custom_paths": [],
          "enabled": true,
          "hosts": [],
          "porter_hosts": [],
          "provider": "aws",
          "rewriteCustomPathsEnabled": true,
          "tls": true,
          "useDefaultIngressTLSSecret": false,
          "wildcard": false
        },
        "keda": {
          "cooldownPeriod": 300,
          "enabled": false,
          "fallback": {
            "failureReplicas": 6,
            "failureThreshold": 3
          },
          "hpa": {
            "scaleDown": {
              "policy": {
                "periodSeconds": 300,
                "type": "Percent",
                "value": 10
              },
              "stabilizationWindowSeconds": 300
            },
            "scaleUp": {
              "policy": {
                "periodSeconds": 300,
                "type": "Percent",
                "value": 10
              },
              "stabilizationWindowSeconds": 300
            }
          },
          "maxReplicaCount": 10,
          "minReplicaCount": 1,
          "pollingInterval": 30,
          "trigger": {
            "metricName": "",
            "metricQuery": "",
            "metricThreshold": "",
            "metricType": "AverageValue"
          },
          "triggers": []
        },
        "nodeSelector": {},
        "podLabels": {},
        "privateIngress": {
          "annotations": {},
          "clusterIssuer": "letsencrypt-prod-private",
          "custom_paths": [],
          "enabled": false,
          "hosts": [],
          "tls": false
        },
        "pvc": {
          "enabled": false,
          "existingVolume": "",
          "mountPath": "/mypath",
          "storage": "20Gi"
        },
        "replicaCount": 1,
        "resources": {
          "requests": {
            "cpu": "100m",
            "memory": "256Mi"
          }
        },
        "service": {
          "port": 80
        },
        "serviceAccount": {
          "annotations": {},
          "create": true,
          "name": ""
        },
        "stack": {
          "enabled": false,
          "name": "",
          "revision": 0
        },
        "statefulset": {
          "enabled": false
        },
        "terminationGracePeriodSeconds": 30,
        "tolerations": [],
        "topology": {
          "enabled": false,
          "labelSelector": {
            "enabled": false,
            "matchLabels": {}
          }
        }
      }
    },
    "schema": null,
    "files": null
  },
  "config": {
    "asdf-web": {
      "autoscaling": {
        "enabled": false,
        "maxReplicas": "10",
        "minReplicas": "1",
        "targetCPUUtilizationPercentage": "50",
        "targetMemoryUtilizationPercentage": "50"
      },
      "cloudsql": {
        "connectionName": "",
        "dbPort": "5432",
        "enabled": false,
        "serviceAccountJSON": ""
      },
      "container": {
        "command": "",
        "env": {
          "normal": {},
          "synced": []
        },
        "port": "3000"
      },
      "health": {
        "livenessProbe": {
          "enabled": false,
          "failureThreshold": "3",
          "path": "/livez",
          "periodSeconds": "5"
        },
        "readinessProbe": {
          "enabled": false,
          "failureThreshold": "3",
          "initialDelaySeconds": "0",
          "path": "/readyz"
        },
        "startupProbe": {
          "enabled": false,
          "failureThreshold": "3",
          "path": "/startupz",
          "periodSeconds": "5"
        }
      },
      "ingress": {
        "annotations": {},
        "custom_domain": false,
        "enabled": false,
        "hosts": [],
        "porter_hosts": []
      },
      "labels": {
        "porter.run/porter-application": "true"
      },
      "nodeSelector": {},
      "podLabels": {
        "porter.run/porter-application": "true"
      },
      "replicaCount": "1",
      "resources": {
        "requests": {
          "cpu": "100m",
          "memory": "256Mi"
        }
      },
      "service": {
        "port": "3000"
      }
    },
    "global": {
      "image": {
        "repository": "nginx",
        "tag": "latest"
      }
    }
  },
  "manifest": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app.kubernetes.io/instance: a\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: asdf-web\n    app.kubernetes.io/version: 1.25.0\n    helm.sh/chart: asdf-web-0.136.0\n  name: a-asdf-web\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/instance: a\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: asdf-web\n    app.kubernetes.io/version: 1.25.0\n    helm.sh/chart: asdf-web-0.136.0\n  name: a-asdf-web\nspec:\n  ports:\n  - name: http\n    port: 3000\n    protocol: TCP\n    targetPort: http\n  selector:\n    app.kubernetes.io/instance: a\n    app.kubernetes.io/name: asdf-web\n  type: ClusterIP\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/instance: a\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: asdf-web\n    app.kubernetes.io/version: 1.25.0\n    helm.sh/chart: asdf-web-0.136.0\n    porter.run/porter-application: \"true\"\n  name: a-asdf-web\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/instance: a\n      app.kubernetes.io/name: asdf-web\n  template:\n    metadata:\n      annotations:\n        helm.sh/revision: \"1\"\n      labels:\n        app.kubernetes.io/instance: a\n        app.kubernetes.io/name: asdf-web\n        porter.run/application-name: a\n        porter.run/porter-application: \"true\"\n    spec:\n      containers:\n      - env:\n        - name: PORTER_RESOURCES_REPLICAS\n          value: \"1\"\n        - name: PORTER_RESOURCES_RAM\n          value: 256Mi\n        - name: PORTER_RESOURCES_CPU\n          value: 100m\n        - name: PORTER_POD_REVISION\n          value: \"1\"\n        - name: PORTER_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: PORTER_POD_IP\n          valueFrom:\n            fieldRef:\n              fieldPath: status.podIP\n        - name: PORTER_POD_IMAGE_TAG\n          value: latest\n        - name: PORTER_NODE_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: spec.nodeName\n        - name: PORT\n          value: \"3000\"\n        image: nginx:latest\n        imagePullPolicy: Always\n        name: asdf-web\n        ports:\n        - containerPort: 3000\n          name: http\n          protocol: TCP\n        resources:\n          limits:\n            memory: 256Mi\n          requests:\n            cpu: 100m\n            memory: 256Mi\n        securityContext: null\n      hostAliases: []\n      securityContext: null\n      serviceAccountName: a-asdf-web\n      terminationGracePeriodSeconds: 30\n      tolerations:\n      - effect: NoSchedule\n        key: removable\n        operator: Equal\n        value: \"true\"\n",
  "hooks": [
    {
      "name": "a-asdf-web-test-connection",
      "kind": "Pod",
      "path": "umbrella/charts/asdf-web/templates/tests/test-connection.yaml",
      "manifest": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: \"a-asdf-web-test-connection\"\n  labels:\n    helm.sh/chart: asdf-web-0.136.0\n    app.kubernetes.io/name: asdf-web\n    app.kubernetes.io/instance: a\n    app.kubernetes.io/version: \"1.25.0\"\n    app.kubernetes.io/managed-by: Helm\n  annotations:\n    \"helm.sh/hook\": test-success\nspec:\n  containers:\n    - name: wget\n      image: busybox\n      command: ['wget']\n      args: ['a-asdf-web:3000']\n  restartPolicy: Never",
      "events": [
        "test"
      ],
      "last_run": {
        "started_at": "",
        "completed_at": "",
        "phase": ""
      }
    }
  ],
  "version": 1,
  "namespace": "porter-stack-a"
}
